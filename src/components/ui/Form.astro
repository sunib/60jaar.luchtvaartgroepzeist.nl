---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { actionUrl, inputs, textarea, disclaimer, button, description = '' } = Astro.props;
---

<form action={actionUrl} method="post">
  {
    inputs &&
      inputs.map(
        ({
          type = 'text',
          name,
          label = '',
          autocomplete = 'on',
          placeholder = '',
          radioOptions,
          required,
          defaultValue,
        }) =>
          name && (
            <div class="mb-6">
              {radioOptions ? (
                <div>
                  <div class="pb-2 block text-sm font-medium">{label}</div>
                  <div class="p-2 [&:has(input[type='radio']:user-invalid)]:border-2 border-red-400 rounded-lg">
                    {radioOptions?.map((v, i) => (
                      <div class="p-1 flex items-center w-full">
                        <label class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400 flex items-center w-full">
                          <input
                            type="radio"
                            id={`mce-${name}${i}`}
                            name={name}
                            value={v}
                            required={required}
                            checked={defaultValue && v === defaultValue}
                            class="cursor-pointer mr-2 rounded border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:ring-blue-500"
                          />
                          {v}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <div>
                  <label for={name} class="pb-2 block text-sm font-medium">
                    {label}
                  </label>
                  <input
                    type={type}
                    name={name}
                    id={name}
                    autocomplete={autocomplete}
                    placeholder={placeholder}
                    required={required}
                    value={defaultValue}
                    readonly={inputs.find((input) => input.name === name)?.readonly}
                    class={`valid:focus:bg-lime-50 :bg-red-400 [&:user-invalid]:border-red-400 py-3 px-4 block w-full text-md rounded-lg border-2 border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 ${inputs.find((input) => input.name === name)?.readonly ? 'bg-gray-100 dark:bg-gray-800' : ''}`}
                  />
                </div>
              )}
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="pb-2 block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('bbq-form') as HTMLFormElement;
    if (!form) return;

    const adultsInput = document.getElementById('RADULTS') as HTMLInputElement;
    const childrenInput = document.getElementById('RCHILDREN') as HTMLInputElement;
    const totalInput = document.getElementById('RTOTAL') as HTMLInputElement;

    // Prijzen
    const ADULT_PRICE = 25;
    const CHILD_PRICE = 12.5;

    function calculateTotal() {
      const adults = parseInt(adultsInput?.value || '0');
      const children = parseInt(childrenInput?.value || '0');
      const total = adults * ADULT_PRICE + children * CHILD_PRICE;

      if (totalInput) {
        totalInput.value = `€${total.toFixed(2)}`;
      }

      return total;
    }

    // Event listeners voor berekening
    adultsInput?.addEventListener('input', calculateTotal);
    childrenInput?.addEventListener('input', calculateTotal);

    // Initiële berekening
    calculateTotal();

    // Form submit - sla bedrag op in localStorage
    form.addEventListener('submit', function (_) {
      const total = calculateTotal();
      const adults = parseInt(adultsInput?.value || '0');
      const children = parseInt(childrenInput?.value || '0');

      // Sla bedraggegevens op in localStorage
      if (total > 0) {
        const paymentData = {
          total: total,
          adults: adults,
          children: children,
          timestamp: new Date().toISOString(),
        };
        localStorage.setItem('bbq-payment', JSON.stringify(paymentData));
      }
    });
  });
</script>
