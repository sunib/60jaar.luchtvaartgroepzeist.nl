---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { actionUrl, inputs, textarea, disclaimer, button, description = '' } = Astro.props;
---

<form action={actionUrl} method="post" id="bbq-form">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', radioOptions, required, defaultValue }) =>
          name && (
            <div class="mb-6">
              {radioOptions ? (
                <div>
                  <div class="pb-2 block text-sm font-medium">{label}</div>
                  <div class="p-2 [&:has(input[type='radio']:user-invalid)]:border-2 border-red-400 rounded-lg">
                    {radioOptions?.map((v, i) => (
                      <div class="p-1 flex items-center w-full">
                        <label class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400 flex items-center w-full">
                          <input
                            type="radio"
                            id={`mce-${name}${i}`}
                            name={name}
                            value={v}
                            required={required}
                            checked={defaultValue && v === defaultValue}
                            class="cursor-pointer mr-2 rounded border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:ring-blue-500"
                          />
                          {v}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <div>
                  <label for={name} class="pb-2 block text-sm font-medium">
                    {label}
                  </label>
                  <input
                    type={type}
                    name={name}
                    id={name}
                    autocomplete={autocomplete}
                    placeholder={placeholder}
                    required={required}
                    value={defaultValue}
                    readonly={inputs.find(input => input.name === name)?.readonly}
                    class={`valid:focus:bg-lime-50 :bg-red-400 [&:user-invalid]:border-red-400 py-3 px-4 block w-full text-md rounded-lg border-2 border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 ${inputs.find(input => input.name === name)?.readonly ? 'bg-gray-100 dark:bg-gray-800' : ''}`}
                  />
                </div>
              )}
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="pb-2 block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  <div id="payment-link" class="mb-6"></div>

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('bbq-form') as HTMLFormElement;
    if (!form) return;

    const adultsInput = document.getElementById('RADULTS') as HTMLInputElement;
    const childrenInput = document.getElementById('RCHILDREN') as HTMLInputElement;
    const totalInput = document.getElementById('RTOTAL') as HTMLInputElement;
    const paymentLinkDiv = document.getElementById('payment-link') as HTMLDivElement;
    
    function getPaymentStatus() {
      const paymentRadios = document.querySelectorAll('input[name="RPAYMENT"]:checked') as NodeListOf<HTMLInputElement>;
      return paymentRadios.length > 0 ? paymentRadios[0].value : 'Nog niet betaald';
    }
    
    // Prijzen
    const ADULT_PRICE = 25;
    const CHILD_PRICE = 12.5;

    function calculateTotal() {
      const adults = parseInt(adultsInput?.value || '0');
      const children = parseInt(childrenInput?.value || '0');
      const total = (adults * ADULT_PRICE) + (children * CHILD_PRICE);
      
      if (totalInput) {
        totalInput.value = `â‚¬${total.toFixed(2)}`;
      }
      
      // Toon betaallink als er een bedrag is en nog niet betaald
      if (paymentLinkDiv && total > 0 && getPaymentStatus() === 'Nog niet betaald') {
        showPaymentLink(total);
      } else if (paymentLinkDiv) {
        hidePaymentLink();
      }
    }

    function showPaymentLink(amount: number) {
      const ingUrl = 'https://www.ing.nl/de-ing/payreq?trxid=SrtprGS3xyaM0E09FfnQR0mfQ9eF4brf&flow-step=payment-request';
      
      paymentLinkDiv.innerHTML = `
        <div class="p-4 bg-white dark:bg-slate-900 border-2 border-blue-200 dark:border-blue-800 rounded-lg">
          <div class="pb-2 block text-sm font-medium text-gray-900 dark:text-white">ðŸ’³ Betaling BBQ</div>
          <div class="space-y-3">
            <div class="text-sm text-gray-700 dark:text-gray-300">
              Totaalbedrag: <strong class="text-lg text-blue-600 dark:text-blue-400">â‚¬${amount.toFixed(2)}</strong>
            </div>
            <div class="text-sm text-gray-600 dark:text-gray-400">
              Vermeld bij de betaling je naam en "Reunie BBQ"
            </div>
            
            <a href="${ingUrl}" target="_blank" id="payment-button"
               class="w-full inline-flex justify-center items-center px-4 py-3 bg-orange-600 hover:bg-orange-700 text-white font-medium rounded-lg transition-colors">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
              </svg>
              Betaal â‚¬${amount.toFixed(2)} via ING
            </a>

            <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded p-2">
              <div class="text-xs text-yellow-700 dark:text-yellow-300">
                <strong>Na betaling:</strong> Kom terug naar deze pagina en klik hieronder op "Ik heb betaald"
              </div>
            </div>
            
            <button type="button" id="mark-paid-button"
                    class="w-full inline-flex justify-center items-center px-3 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg transition-colors">
              <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
              </svg>
              âœ… Ik heb zojuist betaald
            </button>
          </div>
        </div>
      `;
      
      // Event listener voor de "Ik heb betaald" knop
      const markPaidButton = document.getElementById('mark-paid-button');
      markPaidButton?.addEventListener('click', function() {
        // Selecteer "Reeds betaald" radio button
        const paidRadio = document.querySelector('input[name="RPAYMENT"][value="Reeds betaald"]') as HTMLInputElement;
        if (paidRadio) {
          paidRadio.checked = true;
          // Trigger change event om de betaallink te verbergen
          calculateTotal();
          
          // Toon bevestiging
          const confirmation = document.createElement('div');
          confirmation.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
          confirmation.innerHTML = 'âœ… Betaalstatus bijgewerkt naar "Reeds betaald"';
          document.body.appendChild(confirmation);
          
          // Verwijder bevestiging na 3 seconden
          setTimeout(() => {
            document.body.removeChild(confirmation);
          }, 3000);
        }
      });
    }

    function hidePaymentLink() {
      paymentLinkDiv.innerHTML = '';
    }

    // Event listeners voor berekening
    adultsInput?.addEventListener('input', calculateTotal);
    childrenInput?.addEventListener('input', calculateTotal);
    
    // Event listeners voor radio buttons
    const paymentRadios = document.querySelectorAll('input[name="RPAYMENT"]');
    paymentRadios.forEach(radio => {
      radio.addEventListener('change', calculateTotal);
    });

    // InitiÃ«le berekening
    calculateTotal();

    // Form validatie bij submit
    form.addEventListener('submit', function(e) {
      const paymentStatus = getPaymentStatus();
      const total = totalInput?.value;
      
      if (total && total !== 'â‚¬0.00' && paymentStatus === 'Nog niet betaald') {
        const confirmed = confirm(
          `Je hebt aangegeven nog niet te hebben betaald voor een bedrag van ${total}. ` +
          `Weet je zeker dat je het formulier wilt versturen? ` +
          `Je kunt nog steeds betalen via de ING-link hierboven.`
        );
        if (!confirmed) {
          e.preventDefault();
          return;
        }
      }
    });
  });
</script>
